import networkx as nx
from ipysigma import Sigma
from shinyswatch import theme
from shiny import reactive, req
from shiny.express import input, ui, render
from shinywidgets import render_widget, render_plotly
import pandas as pd
import netfunction
import plotly.express as px
from faicons import icon_svg
import plotly.graph_objects as go


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
ui.page_opts(
    title=ui.div(
        icon_svg("vector-square"),      # –ò–∫–æ–Ω–∫–∞ —Å–µ—Ç–∏ –∏–∑ faicons
        " Network Dashboard",
        style="display: flex; align-items: center;"
    ),
    fillable=True,
    id="page",
    theme=theme.journal
)

# Sidebar: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –≥—Ä–∞—Ñ–æ–≤
with ui.sidebar(width=350):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    ui.HTML("<h5> ‚öôÔ∏è–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h5>")
    ui.hr()

    with ui.card(full_screen=False):
        ui.input_file("file", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:", accept=".xlsx", width=200,
                      button_label='–û–±–∑–æ—Ä', placeholder='–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

    ui.hr()

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å–µ—Ç–µ–π
    with ui.card(full_screen=False):
        with ui.accordion(id="acc", multiple=True, open=False):
            with ui.accordion_panel('–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö'):
                ui.input_date_range(
                    "pub_date", "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:",
                    start="2024-01-01", end="2024-12-31",
                    min="2024-01-01", max="2024-12-31", width=200
                )
                ui.input_selectize("experience", "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:",
                                   choices=[], multiple=True, width=200)
                ui.input_selectize("region", "–†–µ–≥–∏–æ–Ω:", choices=[],
                                   multiple=True, width=200)
                ui.input_selectize("employer", "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å:",
                                   choices=[], multiple=True, width=200)
                ui.input_selectize("specialty", "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:",
                                   choices=[], multiple=True, width=200)
                ui.input_slider("salary", "–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞:", min=0,
                                max=100000, value=[0, 100000])

    with ui.card(full_screen=False):
        with ui.accordion(id="acc2", multiple=True, open=False):
            with ui.accordion_panel('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–≤—É–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞'):
                ui.input_selectize(
                    "bipartite_col", "–í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–∫–∏:", choices=['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
                                                                '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞', '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥'],
                    selected='–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', width=250)
                ui.input_selectize(
                    "bipartite_row", "–í—ã–±–æ—Ä —Å—Ç—Ä–æ–∫–∏:", choices=['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏',
                                                               '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞', '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥'],
                    selected='–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏', width=250)

    ui.hr()


# –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã


@reactive.calc
def df():
    f = req(input.file())
    return pd.read_excel(f[0]['datapath'])


@reactive.calc
def processed_data():
    data = df()
    data['–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏'] = data['–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏'].apply(
        netfunction.parse_skills)
    data = data.dropna(subset='–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å')
    data.reset_index(inplace=True, drop=True)
    data['–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'] = pd.to_datetime(data['–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'])
    data["–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"] = data["–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞"].apply(
        netfunction.get_federal_district)
    return data


@reactive.effect
def update_filter_choices():
    data = processed_data()
    exp_choices = sorted(data["–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"].dropna().unique().tolist())
    region_choices = sorted(
        data["–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞"].dropna().unique().tolist())
    employer_choices = sorted(data['–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å'].dropna().unique().tolist())
    specialty_choices = sorted(
        data["–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"].dropna().unique().tolist())

    ui.update_selectize("experience", choices=exp_choices)
    ui.update_selectize("region", choices=region_choices)
    ui.update_selectize("employer", choices=employer_choices)
    ui.update_selectize("specialty", choices=specialty_choices)


@reactive.effect
def update_date_range():
    data = processed_data()
    if not data.empty:
        dates = data['–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏']
        min_date = dates.min().date().isoformat()
        max_date = dates.max().date().isoformat()
        ui.update_date_range("pub_date", min=min_date,
                             max=max_date, start=min_date, end=max_date)


@reactive.effect
def update_salary_range():
    data = processed_data()
    if not data.empty:
        min_salary = int(data['–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞'].min())
        max_salary = int(data['–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞'].max())
        ui.update_slider("salary", min=min_salary,
                         max=max_salary, value=[min_salary, max_salary])


@reactive.calc
def filtered_data():
    data = processed_data()
    if input.pub_date():
        start_date, end_date = input.pub_date()
        data = data[(data['–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'] >= pd.to_datetime(start_date)) &
                    (data['–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'] <= pd.to_datetime(end_date))]
    if input.experience():
        data = data[data['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'].isin(input.experience())]
    if input.region():
        data = data[data['–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞'].isin(input.region())]
    if input.salary():
        min_salary, max_salary = input.salary()
        data = data[(data['–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞'] >= min_salary) &
                    (data['–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞'] <= max_salary)]
    if input.employer():
        data = data[data['–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å'].isin(input.employer())]
    if input.specialty():
        data = data[data['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏'].isin(input.specialty())]
    return data


@reactive.calc
def semantic_cooccurrence_matrix():
    data = filtered_data()
    if data.empty:
        return pd.DataFrame()
    return netfunction.create_co_occurrence_matrix(data, '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏')


@reactive.calc
def multilevel_matrix():
    data = filtered_data()
    if data.empty:
        return pd.DataFrame()
    bipartite_matrix = bipartite_matrix_custom()
    return netfunction.create_whole_matrix(bipartite_matrix,
                                           df_data=data,
                                           use_co_occurrence=True,
                                           skills_field='–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏'
                                           )


@reactive.calc
def multilevel_graph():
    matrix = multilevel_matrix()
    if matrix.empty:
        return None
    return nx.from_pandas_adjacency(matrix)


@reactive.calc
def semantic_graph():
    matrix = semantic_cooccurrence_matrix()
    if matrix.empty:
        return None
    G = nx.from_pandas_adjacency(matrix)
    return G


@reactive.calc
def bipartite_matrix_custom():
    data = filtered_data()
    if data.empty:
        return pd.DataFrame()
    # –ï—Å–ª–∏ —Å–µ–ª–µ–∫—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    col_var = input.bipartite_col() or '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏'
    row_var = input.bipartite_row() or '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏'
    return netfunction.create_group_values_matrix(data, col_var, row_var)


@reactive.calc
def bipartite_graph():
    matrix = bipartite_matrix_custom()
    if matrix.empty:
        return None
    return netfunction.create_bipartite_graph(matrix)


ui.nav_spacer()
with ui.nav_panel("–î–∞–Ω–Ω—ã–µ", icon=icon_svg("table")):
    with ui.card(full_screen=True):
        ui.card_header("üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

        @render.data_frame
        def table():
            return render.DataTable(processed_data(), filters=True, height='550px')


with ui.nav_panel("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", icon=icon_svg("chart-bar")):
    with ui.layout_columns(col_widths=(12, 12)):
        with ui.card(full_screen=True):
            ui.card_header(
                "üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã: –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥ ‚Üí –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ‚Üí –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")

            @render_plotly
            def sankey_chart():
                data = filtered_data()
                if data.empty:
                    return px.scatter(title="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                df_sankey = data.groupby(["–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥", "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"])[
                    "–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞"].agg(netfunction.nonzero_mean).reset_index()

                unique_districts = list(
                    df_sankey["–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"].unique())
                unique_specialties = list(
                    df_sankey["–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"].unique())
                unique_experience = list(df_sankey["–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"].unique())

                nodes = unique_districts + unique_specialties + unique_experience
                node_indices = {name: i for i, name in enumerate(nodes)}

                source_districts = df_sankey["–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"].map(
                    node_indices).tolist()
                target_specialties = df_sankey["–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"].map(
                    node_indices).tolist()
                values_districts = df_sankey["–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞"].tolist()

                source_specialties = df_sankey["–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"].map(
                    node_indices).tolist()
                target_experience = df_sankey["–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"].map(
                    node_indices).tolist()
                values_specialties = df_sankey["–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞"].tolist()

                source = source_districts + source_specialties
                target = target_specialties + target_experience
                value = values_districts + values_specialties

                palette = px.colors.qualitative.Set2
                node_colors = {node: palette[i % len(
                    palette)] for i, node in enumerate(nodes)}

                opacity = 0.4
                link_colors = [node_colors[nodes[src]].replace(
                    ")", f", {opacity})").replace("rgb", "rgba") for src in source]

                fig = go.Figure(go.Sankey(
                    valueformat=".0f",
                    node=dict(
                        pad=15,
                        thickness=25,
                        line=dict(color="black", width=0.7),
                        label=nodes,
                        color=[node_colors[node]
                               for node in nodes],
                        hoverlabel=dict(
                            font=dict(size=14, family="Arial", color="black", weight="bold")),
                    ),
                    link=dict(
                        source=source,
                        target=target,
                        value=value,
                        color=link_colors
                    )
                ))

                fig.update_layout(
                    title=None,
                    font=dict(size=14, family="Arial", color="black",
                              weight="bold"),
                    plot_bgcolor="white"
                )

                return fig

        with ui.card(full_screen=True):
            ui.card_header("üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º")

            @render_plotly
            def vacancies_trend():
                data = filtered_data()
                if data.empty:
                    return px.scatter(title="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                df_grouped = data.groupby(
                    [pd.Grouper(key="–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", freq="M"),
                     "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"]
                ).size().reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π")

                fig = px.line(
                    df_grouped,
                    x="–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                    y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π",
                    color="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                    title="",
                    template="plotly_white",
                    markers=True
                ).update_layout(xaxis_title=None, yaxis_title=None, title=None)
                return fig


# –ü–∞–Ω–µ–ª—å —Å –≥—Ä–∞—Ñ–∞–º–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ Sigma
with ui.nav_panel("–°–µ—Ç—å", icon=icon_svg('circle-nodes')):
    with ui.navset_card_underline(id="selected_navset_card_underline1"):

        # –ü–∞–Ω–µ–ª—å –¥–ª—è –¥–≤—É–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
        with ui.nav_panel("–î–≤—É–º–æ–¥–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ"):
            with ui.layout_columns(col_widths=(3, 9)):
                # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è Sigma-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–≤—É–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
                with ui.card(full_screen=False):
                    ui.card_header("üîé –§–∏–ª—å—Ç—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

                    ui.input_slider(
                        "edge_threshold_dm", "–ü–æ—Ä–æ–≥ —Å–∏–ª—ã —Å–≤—è–∑–µ–π:",
                        min=0, max=500, value=0, width=250
                    )

                    ui.input_selectize(
                        "node_size_dm", "–ú–µ—Ç—Ä–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —É–∑–ª–∞:",
                        choices=["degree_centrality",
                                 "closeness_centrality", "betweenness_centrality"], width=250
                    )
                    ui.input_slider(
                        "node_size_range_dm", "–î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑–º–µ—Ä–∞ —É–∑–ª–∞:",
                        min=1, max=50, value=[3, 15], width=250
                    )

                    ui.input_slider(
                        "edge_size_range_dm", "–î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–±—Ä–∞:",
                        min=1, max=50, value=[1, 10], width=250
                    )

                    ui.input_selectize(
                        "node_size_scale_dm", "–ú–∞—Å—à—Ç–∞–± —Ä–∞–∑–º–µ—Ä–∞ —É–∑–ª–∞:",
                        choices=["lin", "log", "pow", "sqrt"], width=250
                    )
                    ui.input_slider(
                        "louvain_resolution_dm", "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ Louvain:",
                        min=0, max=2, value=1, step=0.1, width=250
                    )
                # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞
                with ui.card(full_screen=True):
                    ui.card_header("üîó –ì—Ä–∞—Ñ")

                    @render_widget
                    def widget():
                        if filtered_data().empty:
                            ui.notification_show(
                                ui="–û—à–∏–±–∫–∞",
                                action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º",
                                type="error", duration=10
                            )
                            return None
                        G = bipartite_graph()
                        if G is None:
                            ui.notification_show(
                                ui="–û—à–∏–±–∫–∞",
                                action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞",
                                type="error", duration=10
                            )
                            return None
                        # –í—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ —É–∑–ª–æ–≤

                        threshold = input.edge_threshold_dm() or 0
                        G = netfunction.filter_graph(G, threshold)

                        metric_choice = input.node_size_dm()
                        if metric_choice == "degree_centrality":
                            metric = nx.degree_centrality(G)
                        elif metric_choice == "closeness_centrality":
                            metric = nx.closeness_centrality(G)
                        elif metric_choice == "betweenness_centrality":
                            metric = nx.betweenness_centrality(G)
                        else:
                            metric = nx.degree_centrality(G)
                        node_size_values = list(metric.values())

                        return Sigma(
                            G,
                            node_size=node_size_values,
                            node_size_range=input.node_size_range_dm() or (1, 10),
                            edge_size_range=input.edge_size_range_dm() or (1, 10),
                            node_size_scale=input.node_size_scale_dm() or "lin",
                            node_metrics={"community": {
                                "name": "louvain", "resolution": input.louvain_resolution_dm() or 1}},
                            node_color="community",
                            hide_edges_on_move=True,
                            edge_size='weight',
                            node_border_color_from='node'
                        )

        # –ü–∞–Ω–µ–ª—å –¥–ª—è –æ–¥–Ω–æ–º–æ–¥–∞–ª—å–Ω–æ–≥–æ (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ) –≥—Ä–∞—Ñ–∞
        with ui.nav_panel("–û–¥–Ω–æ–º–æ–¥–∞–ª—å–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ"):
            with ui.layout_columns(col_widths=(3, 9)):
                # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è Sigma-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
                with ui.card(full_screen=False):
                    ui.card_header("üîé –§–∏–ª—å—Ç—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
                    ui.input_slider(
                        "edge_threshold_om", "–ü–æ—Ä–æ–≥ —Å–∏–ª—ã —Å–≤—è–∑–µ–π:",
                        min=0, max=500, value=0, width=250
                    )
                    ui.input_selectize(
                        "node_size_om", "–ú–µ—Ç—Ä–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —É–∑–ª–∞:",
                        choices=["degree_centrality",
                                 "closeness_centrality", "betweenness_centrality"], width=250
                    )
                    ui.input_slider(
                        "node_size_range_om", "–î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑–º–µ—Ä–∞ —É–∑–ª–∞:",
                        min=1, max=50, value=[3, 15], width=250
                    )

                    ui.input_slider(
                        "edge_size_range_om", "–î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–±—Ä–∞:",
                        min=1, max=50, value=[1, 10], width=250
                    )

                    ui.input_selectize(
                        "node_size_scale_om", "–ú–∞—Å—à—Ç–∞–± —Ä–∞–∑–º–µ—Ä–∞ —É–∑–ª–∞:",
                        choices=["lin", "log", "pow", "sqrt"], width=250
                    )
                    ui.input_slider(
                        "louvain_resolution_om", "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ Louvain:",
                        min=0, max=2, value=1, step=0.1, width=250
                    )
                # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –≥—Ä–∞—Ñ–∞
                with ui.card(full_screen=True):
                    ui.card_header("üîó –ì—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤")

                    @render_widget
                    def widget_semantic():
                        if filtered_data().empty:
                            ui.notification_show(
                                ui="–û—à–∏–±–∫–∞",
                                action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º",
                                type="error", duration=10
                            )
                            return None

                        G = semantic_graph()

                        if G is None:
                            ui.notification_show(
                                ui="–û—à–∏–±–∫–∞",
                                action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞",
                                type="error", duration=10
                            )
                            return None

                        threshold = input.edge_threshold_om() or 0
                        G = netfunction.filter_graph(G, threshold)
                        # –í—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ —É–∑–ª–æ–≤
                        metric_choice = input.node_size_om()
                        if metric_choice == "degree_centrality":
                            metric = nx.degree_centrality(G)
                        elif metric_choice == "closeness_centrality":
                            metric = nx.closeness_centrality(G)
                        elif metric_choice == "betweenness_centrality":
                            metric = nx.betweenness_centrality(G)
                        else:
                            metric = nx.degree_centrality(G)
                        node_size_values = list(metric.values())

                        return Sigma(
                            G,
                            node_size=node_size_values,
                            node_size_range=input.node_size_range_om() or (3, 15),
                            edge_size_range=input.edge_size_range_om() or (1, 10),
                            node_size_scale=input.node_size_scale_om() or "lin",
                            node_metrics={"community": {
                                "name": "louvain", "resolution": input.louvain_resolution_om() or 1}},
                            node_color="community",
                            hide_edges_on_move=True,
                            edge_size='weight',
                            node_border_color_from='node'
                        )
        # --- –ü–∞–Ω–µ–ª—å "–°–µ—Ç—å" (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —á–∞—Å—Ç—å, –≤–∫–ª—é—á–∞—é—â–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥–ø–∞–Ω–µ–ª–∏) ---
        with ui.nav_panel("–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –≥—Ä–∞—Ñ"):
            with ui.layout_columns(col_widths=(3, 9)):
                # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –§–∏–ª—å—Ç—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∞
                with ui.card(full_screen=False):
                    ui.card_header("üîé –§–∏–ª—å—Ç—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

                    ui.input_slider("top_n_ml", "–í—ã–±–æ—Ä —Ç–æ–ø —É–∑–ª–æ–≤:",
                                    min=1, max=2000, value=1000, width=250
                                    )

                    ui.input_selectize(
                        "node_size_ml", "–ú–µ—Ç—Ä–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —É–∑–ª–∞:",
                        choices=["degree_centrality",
                                 "closeness_centrality", "betweenness_centrality"],
                        selected='degree_centrality', width=250
                    )
                    ui.input_slider(
                        "node_size_range_ml", "–î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑–º–µ—Ä–∞ —É–∑–ª–∞:",
                        min=1, max=50, value=[3, 15], width=250
                    )

                    ui.input_slider(
                        "edge_size_range_ml", "–î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–±—Ä–∞:",
                        min=1, max=50, value=[1, 10], width=250
                    )

                    ui.input_selectize(
                        "node_size_scale_ml", "–ú–∞—Å—à—Ç–∞–± —Ä–∞–∑–º–µ—Ä–∞ —É–∑–ª–∞:",
                        choices=["lin", "log", "pow", "sqrt"],
                        selected='lin', width=250
                    )
                    ui.input_slider(
                        "louvain_resolution_ml", "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ Louvain:",
                        min=0, max=2, value=1, step=0.1, width=250
                    )

                # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∞
                with ui.card(full_screen=True):
                    ui.card_header("üîó –ì—Ä–∞—Ñ '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å-–ù–∞–≤—ã–∫'")

                    @render_widget
                    def widget_multilevel():
                        if filtered_data().empty:
                            ui.notification_show(
                                ui="–û—à–∏–±–∫–∞",
                                action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã",
                                type="error", duration=10
                            )
                            return None
                        # –°–æ–∑–¥–∞—ë–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é –º–∞—Ç—Ä–∏—Ü—É:

                        try:
                            G = multilevel_graph()
                            G = netfunction.filter_matrix_from_graph(G,
                                                                     centrality_type='degree_centrality',
                                                                     top_n=input.top_n_ml())
                        except:
                            ui.notification_show(
                                ui="–û—à–∏–±–∫–∞",
                                action="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é –º–∞—Ç—Ä–∏—Ü—É",
                                type="error", duration=10
                            )
                            return None

                        metric_choice = input.node_size_ml()
                        if metric_choice == "degree_centrality":
                            metric = nx.degree_centrality(G)
                        elif metric_choice == "closeness_centrality":
                            metric = nx.closeness_centrality(G)
                        elif metric_choice == "betweenness_centrality":
                            metric = nx.betweenness_centrality(G)

                        node_size_values = list(metric.values())

                        # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ —Å –ø–æ–º–æ—â—å—é Sigma
                        return Sigma(
                            G,
                            node_size=node_size_values,
                            node_size_range=input.node_size_range_ml(),
                            edge_size_range=input.edge_size_range_ml(),
                            node_size_scale=input.node_size_scale_ml(),
                            node_metrics={"community": {
                                "name": "louvain", "resolution": input.louvain_resolution_ml()}},
                            node_color="community",
                            hide_edges_on_move=True,
                            edge_size='weight',
                            node_border_color_from='node'
                        )


# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

def create_bar_chart(G, node, node_type, top_n, recommendation_func, x_label, title_template):
    """
    –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫-–±–∞—Ä —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

    :param G: –ì—Ä–∞—Ñ, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—â—É—Ç—Å—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
    :param node: –í—ã–±—Ä–∞–Ω–Ω—ã–π —É–∑–µ–ª.
    :param node_type: –¢–∏–ø —É–∑–ª–∞ ("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å" –∏–ª–∏ "–ù–∞–≤—ã–∫").
    :param top_n: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π (–≤–µ—Ä—Ö–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π).
    :param recommendation_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    :param x_label: –ü–æ–¥–ø–∏—Å—å –¥–ª—è –æ—Å–∏ X.
    :param title_template: –®–∞–±–ª–æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {top_n} –∏ {node}).
    :param error_message: –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–∑–µ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    :return: –û–±—ä–µ–∫—Ç –≥—Ä–∞—Ñ–∏–∫–∞ Plotly.
    """
    if not node:
        return px.bar(x=["–ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤"], y=[0], template="plotly_white").update_layout()

    level_target = "first" if node_type == "–ö–æ–ª–æ–Ω–∫–∞" else "second"

    try:
        recs = recommendation_func(
            G, node, level_target=level_target, top_n=top_n)
        recs.sort(key=lambda x: x[1], reverse=False)
        nodes, similarities = zip(*recs)
    except:
        return px.bar(x=["–ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤"], y=[0], template="plotly_white").update_layout()

    unique_nodes = list(set(nodes))
    colors = px.colors.qualitative.G10
    color_map = {n: colors[i % len(colors)]
                 for i, n in enumerate(unique_nodes)}

    fig = px.bar(
        y=nodes,
        x=similarities,
        labels={'x': x_label, 'y': ''},
        title=title_template.format(top_n=top_n, node=node),
        color=nodes,
        template="plotly_white",
        color_discrete_map=color_map
    ).update_layout(showlegend=False, title_x=0.5)

    return fig


# --- –ö–æ–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
with ui.nav_panel("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", icon=icon_svg('diagram-project')):
    with ui.navset_card_underline(id="selected_navset_card_underline"):
        with ui.nav_panel("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å—Ö–æ–∂–∏—Ö —É–∑–ª–æ–≤"):
            with ui.layout_columns(col_widths=(6, 6)):
                with ui.card(full_screen=True):
                    ui.card_header("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å—Ö–æ–∂–∏—Ö —É–∑–ª–æ–≤ ‚Ññ 1")

                    with ui.layout_columns(col_widths={"sm": (6, 6, 12)}):
                        ui.input_selectize(
                            "node_1", "–í—ã–±—Ä–∞—Ç—å —É–∑–µ–ª:", choices=[])
                        ui.input_selectize("node_type_1", "–ü–æ–∑–∏—Ü–∏—è —É–∑–ª–∞ –≤ –º–∞—Ç—Ä–∏—Ü–µ:", choices=[
                                           "–ö–æ–ª–æ–Ω–∫–∞", "–°—Ç—Ä–æ–∫–∞"])
                        ui.input_numeric(
                            "obs_1", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π:", 3, min=1, max=30, width="750px")
                    ui.hr()

                    @reactive.effect
                    def update_node_choices_1():
                        matrix = bipartite_matrix_custom()
                        if matrix.empty:
                            ui.update_selectize("node_1", choices=[])
                        else:
                            choices = list(matrix.columns) + list(matrix.index)
                            ui.update_selectize("node_1", choices=choices)

                    @render_plotly
                    def recommendations_plot_1():
                        if filtered_data().empty:
                            ui.notification_show(
                                ui="–û—à–∏–±–∫–∞", action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º", type="error", duration=10)
                            return None
                        G = bipartite_graph()
                        node = input.node_1()
                        node_type = input.node_type_1()
                        top_n = input.obs_1()

                        return create_bar_chart(
                            G=G,
                            node=node,
                            node_type=node_type,
                            top_n=top_n,
                            recommendation_func=netfunction.recommend_similar_nodes,
                            x_label='–°—Ö–æ–¥—Å—Ç–≤–æ',
                            title_template='–¢–æ–ø {top_n} —Å—Ö–æ–∂–∏—Ö —É–∑–ª–æ–≤ –¥–ª—è —É–∑–ª–∞ "{node}"'
                        )

                with ui.card(full_screen=True):
                    ui.card_header("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å—Ö–æ–∂–∏—Ö —É–∑–ª–æ–≤ ‚Ññ 2")

                    with ui.layout_columns(col_widths={"sm": (6, 6, 12)}):
                        ui.input_selectize(
                            "node_2", "–í—ã–±—Ä–∞—Ç—å —É–∑–µ–ª:", choices=[])
                        ui.input_selectize("node_type_2", "–ü–æ–∑–∏—Ü–∏—è —É–∑–ª–∞ –≤ –º–∞—Ç—Ä–∏—Ü–µ:", choices=[
                                           "–ö–æ–ª–æ–Ω–∫–∞", "–°—Ç—Ä–æ–∫–∞"])
                        ui.input_numeric(
                            "obs_2", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π:", 3, min=1, max=30, width="750px")
                    ui.hr()

                    @reactive.effect
                    def update_node_choices_2():
                        matrix = bipartite_matrix_custom()
                        if matrix.empty:
                            ui.update_selectize("node_2", choices=[])
                        else:
                            choices = list(matrix.columns) + list(matrix.index)
                            ui.update_selectize("node_2", choices=choices)

                    @render_plotly
                    def recommendations_plot_2():
                        if filtered_data().empty:
                            ui.notification_show(
                                ui="–û—à–∏–±–∫–∞", action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º", type="error", duration=10)
                            return None
                        G = bipartite_graph()
                        node = input.node_2()
                        node_type = input.node_type_2()
                        top_n = input.obs_2()

                        return create_bar_chart(
                            G=G,
                            node=node,
                            node_type=node_type,
                            top_n=top_n,
                            recommendation_func=netfunction.recommend_similar_nodes,
                            x_label='–°—Ö–æ–¥—Å—Ç–≤–æ',
                            title_template='–¢–æ–ø {top_n} —Å—Ö–æ–∂–∏—Ö —É–∑–ª–æ–≤ –¥–ª—è —É–∑–ª–∞ "{node}"'
                        )

        with ui.nav_panel("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö —É–∑–ª–æ–≤"):
            with ui.layout_columns(col_widths=(6, 6)):
                with ui.card(full_screen=True):
                    ui.card_header("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö —É–∑–ª–æ–≤ ‚Ññ 1")

                    with ui.layout_columns(col_widths={"sm": (6, 6, 12)}):
                        ui.input_selectize(
                            "node_3", "–í—ã–±—Ä–∞—Ç—å —É–∑–µ–ª:", choices=[])
                        ui.input_selectize("node_type_3", "–ü–æ–∑–∏—Ü–∏—è —É–∑–ª–∞ –≤ –º–∞—Ç—Ä–∏—Ü–µ:", choices=[
                                           "–ö–æ–ª–æ–Ω–∫–∞", "–°—Ç—Ä–æ–∫–∞"])
                        ui.input_numeric(
                            "obs_3", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π:", 3, min=1, max=30, width="750px")
                    ui.hr()

                    @reactive.effect
                    def update_node_choices_3():
                        matrix = bipartite_matrix_custom()
                        if matrix.empty:
                            ui.update_selectize("node_3", choices=[])
                        else:
                            choices = list(matrix.columns) + list(matrix.index)
                            ui.update_selectize("node_3", choices=choices)

                    @render_plotly
                    def neighbor_recommendations_plot_1():
                        if filtered_data().empty:
                            ui.notification_show(ui="–û—à–∏–±–∫–∞",
                                                 action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º",
                                                 type="error",
                                                 duration=10)
                            return None

                        G = bipartite_graph()
                        node = input.node_3()
                        node_type = input.node_type_3()
                        top_n = input.obs_3()

                        return create_bar_chart(
                            G=G,
                            node=node,
                            node_type=node_type,
                            top_n=top_n,
                            recommendation_func=netfunction.neighbor_recommendations,
                            x_label='–í–µ—Å',
                            title_template='–¢–æ–ø {top_n} —Å–æ—Å–µ–¥–µ–π –¥–ª—è —É–∑–ª–∞ "{node}"'
                        )

                # –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –≤—Ç–æ—Ä–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö —É–∑–ª–æ–≤
                with ui.card(full_screen=True):
                    ui.card_header("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö —É–∑–ª–æ–≤ ‚Ññ 2")

                    with ui.layout_columns(col_widths={"sm": (6, 6, 12)}):
                        ui.input_selectize(
                            "node_4", "–í—ã–±—Ä–∞—Ç—å —É–∑–µ–ª:", choices=[])
                        ui.input_selectize("node_type_4", "–ü–æ–∑–∏—Ü–∏—è —É–∑–ª–∞ –≤ –º–∞—Ç—Ä–∏—Ü–µ:", choices=[
                                           "–ö–æ–ª–æ–Ω–∫–∞", "–°—Ç—Ä–æ–∫–∞"])
                        ui.input_numeric(
                            "obs_4", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π:", 3, min=1, max=30, width="750px")
                    ui.hr()

                    @reactive.effect
                    def update_node_choices_4():
                        matrix = bipartite_matrix_custom()
                        if matrix.empty:
                            ui.update_selectize("node_4", choices=[])
                        else:
                            choices = list(matrix.columns) + list(matrix.index)
                            ui.update_selectize("node_4", choices=choices)

                    @render_plotly
                    def neighbor_recommendations_plot_2():
                        if filtered_data().empty:
                            ui.notification_show(ui="–û—à–∏–±–∫–∞",
                                                 action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º",
                                                 type="error",
                                                 duration=10)
                            return None

                        G = bipartite_graph()
                        node = input.node_4()
                        node_type = input.node_type_4()
                        top_n = input.obs_4()

                        return create_bar_chart(
                            G=G,
                            node=node,
                            node_type=node_type,
                            top_n=top_n,
                            recommendation_func=netfunction.neighbor_recommendations,
                            x_label='–í–µ—Å',
                            title_template='–¢–æ–ø {top_n} —Å–æ—Å–µ–¥–µ–π –¥–ª—è —É–∑–ª–∞ "{node}"'
                        )
